//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: pb/prefix.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParentNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // The hash of this subtree. This hash can be in a populated part of the tree
	// or a stand-in hash.
	Ptr                 *uint64 `protobuf:"varint,2,opt,name=ptr,proto3,oneof" json:"ptr,omitempty"`                                 // The id of the log entry where this subtree is stored.
	FirstUpdatePosition *uint64 `protobuf:"varint,3,opt,name=firstUpdatePosition,proto3,oneof" json:"firstUpdatePosition,omitempty"` // If this node is a stand-in hash, this is the log position needed to re-generate it.
}

func (x *ParentNode) Reset() {
	*x = ParentNode{}
	mi := &file_pb_prefix_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParentNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentNode) ProtoMessage() {}

func (x *ParentNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_prefix_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentNode.ProtoReflect.Descriptor instead.
func (*ParentNode) Descriptor() ([]byte, []int) {
	return file_pb_prefix_proto_rawDescGZIP(), []int{0}
}

func (x *ParentNode) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ParentNode) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

func (x *ParentNode) GetFirstUpdatePosition() uint64 {
	if x != nil && x.FirstUpdatePosition != nil {
		return *x.FirstUpdatePosition
	}
	return 0
}

type LeafNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctr uint32 `protobuf:"varint,1,opt,name=ctr,proto3" json:"ctr,omitempty"` // Counter, incremented each time the key is inserted.
	// Commitment to the update value. This is stored here instead of in the
	// transparency tree implementation to speed up proof generation.
	Commitment []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *LeafNode) Reset() {
	*x = LeafNode{}
	mi := &file_pb_prefix_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeafNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeafNode) ProtoMessage() {}

func (x *LeafNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_prefix_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeafNode.ProtoReflect.Descriptor instead.
func (*LeafNode) Descriptor() ([]byte, []int) {
	return file_pb_prefix_proto_rawDescGZIP(), []int{1}
}

func (x *LeafNode) GetCtr() uint32 {
	if x != nil {
		return x.Ctr
	}
	return 0
}

func (x *LeafNode) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index               []byte        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"` // The full index that was inserted.
	Copath              []*ParentNode `protobuf:"bytes,2,rep,name=copath,proto3" json:"copath,omitempty"`
	FirstUpdatePosition uint64        `protobuf:"varint,3,opt,name=firstUpdatePosition,proto3" json:"firstUpdatePosition,omitempty"` // The first log tree position where this index was updated.
	Leaf                *LeafNode     `protobuf:"bytes,4,opt,name=leaf,proto3,oneof" json:"leaf,omitempty"`
	Precomputed32       []byte        `protobuf:"bytes,6,opt,name=precomputed32,proto3" json:"precomputed32,omitempty"` // Pre-computed intermediate value at level 32.
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_pb_prefix_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pb_prefix_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_pb_prefix_proto_rawDescGZIP(), []int{2}
}

func (x *LogEntry) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *LogEntry) GetCopath() []*ParentNode {
	if x != nil {
		return x.Copath
	}
	return nil
}

func (x *LogEntry) GetFirstUpdatePosition() uint64 {
	if x != nil {
		return x.FirstUpdatePosition
	}
	return 0
}

func (x *LogEntry) GetLeaf() *LeafNode {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *LogEntry) GetPrecomputed32() []byte {
	if x != nil {
		return x.Precomputed32
	}
	return nil
}

var File_pb_prefix_proto protoreflect.FileDescriptor

var file_pb_prefix_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x70, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x74, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x74,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xea, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x65, 0x79, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4c, 0x65, 0x61, 0x66,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x33, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x42, 0x35,
	0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_prefix_proto_rawDescOnce sync.Once
	file_pb_prefix_proto_rawDescData = file_pb_prefix_proto_rawDesc
)

func file_pb_prefix_proto_rawDescGZIP() []byte {
	file_pb_prefix_proto_rawDescOnce.Do(func() {
		file_pb_prefix_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_prefix_proto_rawDescData)
	})
	return file_pb_prefix_proto_rawDescData
}

var file_pb_prefix_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pb_prefix_proto_goTypes = []any{
	(*ParentNode)(nil), // 0: keytransparency.ParentNode
	(*LeafNode)(nil),   // 1: keytransparency.LeafNode
	(*LogEntry)(nil),   // 2: keytransparency.LogEntry
}
var file_pb_prefix_proto_depIdxs = []int32{
	0, // 0: keytransparency.LogEntry.copath:type_name -> keytransparency.ParentNode
	1, // 1: keytransparency.LogEntry.leaf:type_name -> keytransparency.LeafNode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pb_prefix_proto_init() }
func file_pb_prefix_proto_init() {
	if File_pb_prefix_proto != nil {
		return
	}
	file_pb_prefix_proto_msgTypes[0].OneofWrappers = []any{}
	file_pb_prefix_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_prefix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_prefix_proto_goTypes,
		DependencyIndexes: file_pb_prefix_proto_depIdxs,
		MessageInfos:      file_pb_prefix_proto_msgTypes,
	}.Build()
	File_pb_prefix_proto = out.File
	file_pb_prefix_proto_rawDesc = nil
	file_pb_prefix_proto_goTypes = nil
	file_pb_prefix_proto_depIdxs = nil
}
