//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: pb/transparency.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrefixProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof   [][]byte `protobuf:"bytes,1,rep,name=proof,proto3" json:"proof,omitempty"`
	Counter uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *PrefixProof) Reset() {
	*x = PrefixProof{}
	mi := &file_pb_transparency_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixProof) ProtoMessage() {}

func (x *PrefixProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixProof.ProtoReflect.Descriptor instead.
func (*PrefixProof) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{0}
}

func (x *PrefixProof) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *PrefixProof) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

// AuditorTreeHead contains an auditor's signature on its most recent view of the log.
type AuditorTreeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeSize  uint64 `protobuf:"varint,1,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuditorTreeHead) Reset() {
	*x = AuditorTreeHead{}
	mi := &file_pb_transparency_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorTreeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorTreeHead) ProtoMessage() {}

func (x *AuditorTreeHead) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorTreeHead.ProtoReflect.Descriptor instead.
func (*AuditorTreeHead) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{1}
}

func (x *AuditorTreeHead) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

func (x *AuditorTreeHead) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AuditorTreeHead) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// TreeHead contains the key transparency service operator's signature on the most recent version of the
// log.
type TreeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeSize  uint64 `protobuf:"varint,1,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The key transparency service operator provides one Signature object per auditor.
	Signatures []*Signature `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *TreeHead) Reset() {
	*x = TreeHead{}
	mi := &file_pb_transparency_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeHead) ProtoMessage() {}

func (x *TreeHead) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeHead.ProtoReflect.Descriptor instead.
func (*TreeHead) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{2}
}

func (x *TreeHead) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

func (x *TreeHead) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TreeHead) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// The signature incorporates the auditor public key so the service provides one signature per auditor.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditorPublicKey []byte `protobuf:"bytes,1,opt,name=auditor_public_key,json=auditorPublicKey,proto3" json:"auditor_public_key,omitempty"`
	Signature        []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_pb_transparency_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetAuditorPublicKey() []byte {
	if x != nil {
		return x.AuditorPublicKey
	}
	return nil
}

func (x *Signature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// FullAuditorTreeHead is provided to end-users when third-party auditing is used,
// as evidence that the log is behaving honestly.
type FullAuditorTreeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead    *AuditorTreeHead `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	RootValue   []byte           `protobuf:"bytes,2,opt,name=root_value,json=rootValue,proto3,oneof" json:"root_value,omitempty"`
	Consistency [][]byte         `protobuf:"bytes,3,rep,name=consistency,proto3" json:"consistency,omitempty"`
	PublicKey   []byte           `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *FullAuditorTreeHead) Reset() {
	*x = FullAuditorTreeHead{}
	mi := &file_pb_transparency_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullAuditorTreeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullAuditorTreeHead) ProtoMessage() {}

func (x *FullAuditorTreeHead) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullAuditorTreeHead.ProtoReflect.Descriptor instead.
func (*FullAuditorTreeHead) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{4}
}

func (x *FullAuditorTreeHead) GetTreeHead() *AuditorTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *FullAuditorTreeHead) GetRootValue() []byte {
	if x != nil {
		return x.RootValue
	}
	return nil
}

func (x *FullAuditorTreeHead) GetConsistency() [][]byte {
	if x != nil {
		return x.Consistency
	}
	return nil
}

func (x *FullAuditorTreeHead) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// FullTreeHead wraps a basic TreeHead with additional information that may be
// needed for validation.
type FullTreeHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead             *TreeHead              `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	Last                 [][]byte               `protobuf:"bytes,2,rep,name=last,proto3" json:"last,omitempty"`
	Distinguished        [][]byte               `protobuf:"bytes,3,rep,name=distinguished,proto3" json:"distinguished,omitempty"`
	FullAuditorTreeHeads []*FullAuditorTreeHead `protobuf:"bytes,4,rep,name=full_auditor_tree_heads,json=fullAuditorTreeHeads,proto3" json:"full_auditor_tree_heads,omitempty"`
}

func (x *FullTreeHead) Reset() {
	*x = FullTreeHead{}
	mi := &file_pb_transparency_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullTreeHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTreeHead) ProtoMessage() {}

func (x *FullTreeHead) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTreeHead.ProtoReflect.Descriptor instead.
func (*FullTreeHead) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{5}
}

func (x *FullTreeHead) GetTreeHead() *TreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *FullTreeHead) GetLast() [][]byte {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *FullTreeHead) GetDistinguished() [][]byte {
	if x != nil {
		return x.Distinguished
	}
	return nil
}

func (x *FullTreeHead) GetFullAuditorTreeHeads() []*FullAuditorTreeHead {
	if x != nil {
		return x.FullAuditorTreeHeads
	}
	return nil
}

// ProofStep is the output of one step of a binary search through the log.
type ProofStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix     *PrefixProof `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Commitment []byte       `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *ProofStep) Reset() {
	*x = ProofStep{}
	mi := &file_pb_transparency_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProofStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofStep) ProtoMessage() {}

func (x *ProofStep) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofStep.ProtoReflect.Descriptor instead.
func (*ProofStep) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{6}
}

func (x *ProofStep) GetPrefix() *PrefixProof {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *ProofStep) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// SearchProof contains the output of a binary search through the log.
type SearchProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos       uint64       `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Steps     []*ProofStep `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	Inclusion [][]byte     `protobuf:"bytes,3,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
}

func (x *SearchProof) Reset() {
	*x = SearchProof{}
	mi := &file_pb_transparency_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProof) ProtoMessage() {}

func (x *SearchProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProof.ProtoReflect.Descriptor instead.
func (*SearchProof) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{7}
}

func (x *SearchProof) GetPos() uint64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *SearchProof) GetSteps() []*ProofStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *SearchProof) GetInclusion() [][]byte {
	if x != nil {
		return x.Inclusion
	}
	return nil
}

// UpdateValue wraps the new value for a key.
type UpdateValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateValue) Reset() {
	*x = UpdateValue{}
	mi := &file_pb_transparency_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValue) ProtoMessage() {}

func (x *UpdateValue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValue.ProtoReflect.Descriptor instead.
func (*UpdateValue) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Consistency specifies the parameters of the consistency proof(s) that should
// be returned.
type Consistency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Last          *uint64 `protobuf:"varint,1,opt,name=last,proto3,oneof" json:"last,omitempty"`
	Distinguished *uint64 `protobuf:"varint,2,opt,name=distinguished,proto3,oneof" json:"distinguished,omitempty"`
}

func (x *Consistency) Reset() {
	*x = Consistency{}
	mi := &file_pb_transparency_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Consistency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consistency) ProtoMessage() {}

func (x *Consistency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consistency.ProtoReflect.Descriptor instead.
func (*Consistency) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{9}
}

func (x *Consistency) GetLast() uint64 {
	if x != nil && x.Last != nil {
		return *x.Last
	}
	return 0
}

func (x *Consistency) GetDistinguished() uint64 {
	if x != nil && x.Distinguished != nil {
		return *x.Distinguished
	}
	return 0
}

// TreeSearchRequest is a KT-internal data structure used to look up a key.
type TreeSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey   []byte       `protobuf:"bytes,1,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	Consistency *Consistency `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *TreeSearchRequest) Reset() {
	*x = TreeSearchRequest{}
	mi := &file_pb_transparency_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSearchRequest) ProtoMessage() {}

func (x *TreeSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSearchRequest.ProtoReflect.Descriptor instead.
func (*TreeSearchRequest) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{10}
}

func (x *TreeSearchRequest) GetSearchKey() []byte {
	if x != nil {
		return x.SearchKey
	}
	return nil
}

func (x *TreeSearchRequest) GetConsistency() *Consistency {
	if x != nil {
		return x.Consistency
	}
	return nil
}

// TreeSearchResponse is the output of executing a search on the tree.
type TreeSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead *FullTreeHead `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	VrfProof []byte        `protobuf:"bytes,2,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	Search   *SearchProof  `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Opening  []byte        `protobuf:"bytes,4,opt,name=opening,proto3" json:"opening,omitempty"`
	Value    *UpdateValue  `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TreeSearchResponse) Reset() {
	*x = TreeSearchResponse{}
	mi := &file_pb_transparency_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeSearchResponse) ProtoMessage() {}

func (x *TreeSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeSearchResponse.ProtoReflect.Descriptor instead.
func (*TreeSearchResponse) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{11}
}

func (x *TreeSearchResponse) GetTreeHead() *FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *TreeSearchResponse) GetVrfProof() []byte {
	if x != nil {
		return x.VrfProof
	}
	return nil
}

func (x *TreeSearchResponse) GetSearch() *SearchProof {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *TreeSearchResponse) GetOpening() []byte {
	if x != nil {
		return x.Opening
	}
	return nil
}

func (x *TreeSearchResponse) GetValue() *UpdateValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// UpdateRequest comes from a user that wishes to update a key.
type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey   []byte       `protobuf:"bytes,1,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	Value       []byte       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Consistency *Consistency `protobuf:"bytes,3,opt,name=consistency,proto3" json:"consistency,omitempty"`
	// This field is only populated for updates that overwrite
	// an existing search key to point to a dummy value.
	// To avoid a race condition, KT compares what the search key currently maps to
	// against the expected value, and only proceeds with the update if they match.
	ExpectedPreUpdateValue []byte `protobuf:"bytes,4,opt,name=expected_pre_update_value,json=expectedPreUpdateValue,proto3" json:"expected_pre_update_value,omitempty"`
	// A flag that clients can set if they want to get back an update response that they can
	// use to verify the update.
	ReturnUpdateResponse bool `protobuf:"varint,5,opt,name=return_update_response,json=returnUpdateResponse,proto3" json:"return_update_response,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_pb_transparency_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateRequest) GetSearchKey() []byte {
	if x != nil {
		return x.SearchKey
	}
	return nil
}

func (x *UpdateRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateRequest) GetConsistency() *Consistency {
	if x != nil {
		return x.Consistency
	}
	return nil
}

func (x *UpdateRequest) GetExpectedPreUpdateValue() []byte {
	if x != nil {
		return x.ExpectedPreUpdateValue
	}
	return nil
}

func (x *UpdateRequest) GetReturnUpdateResponse() bool {
	if x != nil {
		return x.ReturnUpdateResponse
	}
	return false
}

// UpdateResponse is the output of executing an update on the tree.
type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead *FullTreeHead `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	VrfProof []byte        `protobuf:"bytes,2,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	Search   *SearchProof  `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Opening  []byte        `protobuf:"bytes,4,opt,name=opening,proto3" json:"opening,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_pb_transparency_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResponse) GetTreeHead() *FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *UpdateResponse) GetVrfProof() []byte {
	if x != nil {
		return x.VrfProof
	}
	return nil
}

func (x *UpdateResponse) GetSearch() *SearchProof {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *UpdateResponse) GetOpening() []byte {
	if x != nil {
		return x.Opening
	}
	return nil
}

// MonitorKey is a single key that the user would like to monitor.
type MonitorKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchKey []byte `protobuf:"bytes,1,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	// The position of the last log entry verified by the client
	// to be in the direct path to the identifier
	EntryPosition uint64 `protobuf:"varint,2,opt,name=entry_position,json=entryPosition,proto3" json:"entry_position,omitempty"`
	// the commitment index for the search key
	CommitmentIndex []byte `protobuf:"bytes,3,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
}

func (x *MonitorKey) Reset() {
	*x = MonitorKey{}
	mi := &file_pb_transparency_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorKey) ProtoMessage() {}

func (x *MonitorKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorKey.ProtoReflect.Descriptor instead.
func (*MonitorKey) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{14}
}

func (x *MonitorKey) GetSearchKey() []byte {
	if x != nil {
		return x.SearchKey
	}
	return nil
}

func (x *MonitorKey) GetEntryPosition() uint64 {
	if x != nil {
		return x.EntryPosition
	}
	return 0
}

func (x *MonitorKey) GetCommitmentIndex() []byte {
	if x != nil {
		return x.CommitmentIndex
	}
	return nil
}

// MonitorRequest comes from a user that wishes to monitor a set of keys.
type MonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys        []*MonitorKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Consistency *Consistency  `protobuf:"bytes,2,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *MonitorRequest) Reset() {
	*x = MonitorRequest{}
	mi := &file_pb_transparency_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRequest) ProtoMessage() {}

func (x *MonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRequest.ProtoReflect.Descriptor instead.
func (*MonitorRequest) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{15}
}

func (x *MonitorRequest) GetKeys() []*MonitorKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MonitorRequest) GetConsistency() *Consistency {
	if x != nil {
		return x.Consistency
	}
	return nil
}

// MonitorProof proves that a single key has been correctly managed in the log.
type MonitorProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*ProofStep `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *MonitorProof) Reset() {
	*x = MonitorProof{}
	mi := &file_pb_transparency_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorProof) ProtoMessage() {}

func (x *MonitorProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorProof.ProtoReflect.Descriptor instead.
func (*MonitorProof) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{16}
}

func (x *MonitorProof) GetSteps() []*ProofStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

// MonitorResponse is the output of a monitoring operation.
type MonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead  *FullTreeHead   `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	Proofs    []*MonitorProof `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Inclusion [][]byte        `protobuf:"bytes,4,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
}

func (x *MonitorResponse) Reset() {
	*x = MonitorResponse{}
	mi := &file_pb_transparency_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorResponse) ProtoMessage() {}

func (x *MonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorResponse.ProtoReflect.Descriptor instead.
func (*MonitorResponse) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{17}
}

func (x *MonitorResponse) GetTreeHead() *FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *MonitorResponse) GetProofs() []*MonitorProof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *MonitorResponse) GetInclusion() [][]byte {
	if x != nil {
		return x.Inclusion
	}
	return nil
}

// AuditorProof provides additional information about a change to the tree to
// improve the efficiency of auditors.
type AuditorProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Proof:
	//
	//	*AuditorProof_NewTree_
	//	*AuditorProof_DifferentKey_
	//	*AuditorProof_SameKey_
	Proof isAuditorProof_Proof `protobuf_oneof:"proof"`
}

func (x *AuditorProof) Reset() {
	*x = AuditorProof{}
	mi := &file_pb_transparency_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorProof) ProtoMessage() {}

func (x *AuditorProof) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorProof.ProtoReflect.Descriptor instead.
func (*AuditorProof) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{18}
}

func (m *AuditorProof) GetProof() isAuditorProof_Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (x *AuditorProof) GetNewTree() *AuditorProof_NewTree {
	if x, ok := x.GetProof().(*AuditorProof_NewTree_); ok {
		return x.NewTree
	}
	return nil
}

func (x *AuditorProof) GetDifferentKey() *AuditorProof_DifferentKey {
	if x, ok := x.GetProof().(*AuditorProof_DifferentKey_); ok {
		return x.DifferentKey
	}
	return nil
}

func (x *AuditorProof) GetSameKey() *AuditorProof_SameKey {
	if x, ok := x.GetProof().(*AuditorProof_SameKey_); ok {
		return x.SameKey
	}
	return nil
}

type isAuditorProof_Proof interface {
	isAuditorProof_Proof()
}

type AuditorProof_NewTree_ struct {
	NewTree *AuditorProof_NewTree `protobuf:"bytes,1,opt,name=new_tree,json=newTree,proto3,oneof"`
}

type AuditorProof_DifferentKey_ struct {
	DifferentKey *AuditorProof_DifferentKey `protobuf:"bytes,3,opt,name=different_key,json=differentKey,proto3,oneof"`
}

type AuditorProof_SameKey_ struct {
	SameKey *AuditorProof_SameKey `protobuf:"bytes,4,opt,name=same_key,json=sameKey,proto3,oneof"`
}

func (*AuditorProof_NewTree_) isAuditorProof_Proof() {}

func (*AuditorProof_DifferentKey_) isAuditorProof_Proof() {}

func (*AuditorProof_SameKey_) isAuditorProof_Proof() {}

// AuditorUpdate is the structure shared with a third-party auditor for a single
// update to the tree.
type AuditorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real       bool          `protobuf:"varint,1,opt,name=real,proto3" json:"real,omitempty"`
	Index      []byte        `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Seed       []byte        `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
	Commitment []byte        `protobuf:"bytes,4,opt,name=commitment,proto3" json:"commitment,omitempty"`
	Proof      *AuditorProof `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *AuditorUpdate) Reset() {
	*x = AuditorUpdate{}
	mi := &file_pb_transparency_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorUpdate) ProtoMessage() {}

func (x *AuditorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorUpdate.ProtoReflect.Descriptor instead.
func (*AuditorUpdate) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{19}
}

func (x *AuditorUpdate) GetReal() bool {
	if x != nil {
		return x.Real
	}
	return false
}

func (x *AuditorUpdate) GetIndex() []byte {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *AuditorUpdate) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *AuditorUpdate) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *AuditorUpdate) GetProof() *AuditorProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type AuditorProof_NewTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditorProof_NewTree) Reset() {
	*x = AuditorProof_NewTree{}
	mi := &file_pb_transparency_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorProof_NewTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorProof_NewTree) ProtoMessage() {}

func (x *AuditorProof_NewTree) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorProof_NewTree.ProtoReflect.Descriptor instead.
func (*AuditorProof_NewTree) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{18, 0}
}

type AuditorProof_DifferentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Copath  [][]byte `protobuf:"bytes,1,rep,name=copath,proto3" json:"copath,omitempty"`
	OldSeed []byte   `protobuf:"bytes,2,opt,name=old_seed,json=oldSeed,proto3" json:"old_seed,omitempty"`
}

func (x *AuditorProof_DifferentKey) Reset() {
	*x = AuditorProof_DifferentKey{}
	mi := &file_pb_transparency_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorProof_DifferentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorProof_DifferentKey) ProtoMessage() {}

func (x *AuditorProof_DifferentKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorProof_DifferentKey.ProtoReflect.Descriptor instead.
func (*AuditorProof_DifferentKey) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{18, 1}
}

func (x *AuditorProof_DifferentKey) GetCopath() [][]byte {
	if x != nil {
		return x.Copath
	}
	return nil
}

func (x *AuditorProof_DifferentKey) GetOldSeed() []byte {
	if x != nil {
		return x.OldSeed
	}
	return nil
}

type AuditorProof_SameKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Copath   [][]byte `protobuf:"bytes,1,rep,name=copath,proto3" json:"copath,omitempty"`
	Counter  uint32   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Position uint64   `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *AuditorProof_SameKey) Reset() {
	*x = AuditorProof_SameKey{}
	mi := &file_pb_transparency_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditorProof_SameKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditorProof_SameKey) ProtoMessage() {}

func (x *AuditorProof_SameKey) ProtoReflect() protoreflect.Message {
	mi := &file_pb_transparency_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditorProof_SameKey.ProtoReflect.Descriptor instead.
func (*AuditorProof_SameKey) Descriptor() ([]byte, []int) {
	return file_pb_transparency_proto_rawDescGZIP(), []int{18, 2}
}

func (x *AuditorProof_SameKey) GetCopath() [][]byte {
	if x != nil {
		return x.Copath
	}
	return nil
}

func (x *AuditorProof_SameKey) GetCounter() uint32 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *AuditorProof_SameKey) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

var File_pb_transparency_proto protoreflect.FileDescriptor

var file_pb_transparency_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x7e, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x57, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x46, 0x75,
	0x6c, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x0c, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x08, 0x74,
	0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x17, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x65,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x52, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x53, 0x74, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x11,
	0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xe8, 0x01,
	0x0a, 0x12, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x72, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x76, 0x72, 0x66, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x39, 0x0a, 0x19,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x72,
	0x66, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x7b, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x3d, 0x0a, 0x0c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x9c,
	0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x03,
	0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3f,
	0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x4e, 0x65, 0x77,
	0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x4e, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x53, 0x61,
	0x6d, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79,
	0x1a, 0x09, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x1a, 0x41, 0x0a, 0x0c, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x65, 0x64, 0x1a, 0x57,
	0x0a, 0x07, 0x53, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_transparency_proto_rawDescOnce sync.Once
	file_pb_transparency_proto_rawDescData = file_pb_transparency_proto_rawDesc
)

func file_pb_transparency_proto_rawDescGZIP() []byte {
	file_pb_transparency_proto_rawDescOnce.Do(func() {
		file_pb_transparency_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_transparency_proto_rawDescData)
	})
	return file_pb_transparency_proto_rawDescData
}

var file_pb_transparency_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pb_transparency_proto_goTypes = []any{
	(*PrefixProof)(nil),               // 0: transparency.PrefixProof
	(*AuditorTreeHead)(nil),           // 1: transparency.AuditorTreeHead
	(*TreeHead)(nil),                  // 2: transparency.TreeHead
	(*Signature)(nil),                 // 3: transparency.Signature
	(*FullAuditorTreeHead)(nil),       // 4: transparency.FullAuditorTreeHead
	(*FullTreeHead)(nil),              // 5: transparency.FullTreeHead
	(*ProofStep)(nil),                 // 6: transparency.ProofStep
	(*SearchProof)(nil),               // 7: transparency.SearchProof
	(*UpdateValue)(nil),               // 8: transparency.UpdateValue
	(*Consistency)(nil),               // 9: transparency.Consistency
	(*TreeSearchRequest)(nil),         // 10: transparency.TreeSearchRequest
	(*TreeSearchResponse)(nil),        // 11: transparency.TreeSearchResponse
	(*UpdateRequest)(nil),             // 12: transparency.UpdateRequest
	(*UpdateResponse)(nil),            // 13: transparency.UpdateResponse
	(*MonitorKey)(nil),                // 14: transparency.MonitorKey
	(*MonitorRequest)(nil),            // 15: transparency.MonitorRequest
	(*MonitorProof)(nil),              // 16: transparency.MonitorProof
	(*MonitorResponse)(nil),           // 17: transparency.MonitorResponse
	(*AuditorProof)(nil),              // 18: transparency.AuditorProof
	(*AuditorUpdate)(nil),             // 19: transparency.AuditorUpdate
	(*AuditorProof_NewTree)(nil),      // 20: transparency.AuditorProof.NewTree
	(*AuditorProof_DifferentKey)(nil), // 21: transparency.AuditorProof.DifferentKey
	(*AuditorProof_SameKey)(nil),      // 22: transparency.AuditorProof.SameKey
}
var file_pb_transparency_proto_depIdxs = []int32{
	3,  // 0: transparency.TreeHead.signatures:type_name -> transparency.Signature
	1,  // 1: transparency.FullAuditorTreeHead.tree_head:type_name -> transparency.AuditorTreeHead
	2,  // 2: transparency.FullTreeHead.tree_head:type_name -> transparency.TreeHead
	4,  // 3: transparency.FullTreeHead.full_auditor_tree_heads:type_name -> transparency.FullAuditorTreeHead
	0,  // 4: transparency.ProofStep.prefix:type_name -> transparency.PrefixProof
	6,  // 5: transparency.SearchProof.steps:type_name -> transparency.ProofStep
	9,  // 6: transparency.TreeSearchRequest.consistency:type_name -> transparency.Consistency
	5,  // 7: transparency.TreeSearchResponse.tree_head:type_name -> transparency.FullTreeHead
	7,  // 8: transparency.TreeSearchResponse.search:type_name -> transparency.SearchProof
	8,  // 9: transparency.TreeSearchResponse.value:type_name -> transparency.UpdateValue
	9,  // 10: transparency.UpdateRequest.consistency:type_name -> transparency.Consistency
	5,  // 11: transparency.UpdateResponse.tree_head:type_name -> transparency.FullTreeHead
	7,  // 12: transparency.UpdateResponse.search:type_name -> transparency.SearchProof
	14, // 13: transparency.MonitorRequest.keys:type_name -> transparency.MonitorKey
	9,  // 14: transparency.MonitorRequest.consistency:type_name -> transparency.Consistency
	6,  // 15: transparency.MonitorProof.steps:type_name -> transparency.ProofStep
	5,  // 16: transparency.MonitorResponse.tree_head:type_name -> transparency.FullTreeHead
	16, // 17: transparency.MonitorResponse.proofs:type_name -> transparency.MonitorProof
	20, // 18: transparency.AuditorProof.new_tree:type_name -> transparency.AuditorProof.NewTree
	21, // 19: transparency.AuditorProof.different_key:type_name -> transparency.AuditorProof.DifferentKey
	22, // 20: transparency.AuditorProof.same_key:type_name -> transparency.AuditorProof.SameKey
	18, // 21: transparency.AuditorUpdate.proof:type_name -> transparency.AuditorProof
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pb_transparency_proto_init() }
func file_pb_transparency_proto_init() {
	if File_pb_transparency_proto != nil {
		return
	}
	file_pb_transparency_proto_msgTypes[4].OneofWrappers = []any{}
	file_pb_transparency_proto_msgTypes[9].OneofWrappers = []any{}
	file_pb_transparency_proto_msgTypes[18].OneofWrappers = []any{
		(*AuditorProof_NewTree_)(nil),
		(*AuditorProof_DifferentKey_)(nil),
		(*AuditorProof_SameKey_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_transparency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_transparency_proto_goTypes,
		DependencyIndexes: file_pb_transparency_proto_depIdxs,
		MessageInfos:      file_pb_transparency_proto_msgTypes,
	}.Build()
	File_pb_transparency_proto = out.File
	file_pb_transparency_proto_rawDesc = nil
	file_pb_transparency_proto_goTypes = nil
	file_pb_transparency_proto_depIdxs = nil
}
