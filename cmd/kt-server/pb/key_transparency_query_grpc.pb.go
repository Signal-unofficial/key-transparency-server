//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: key_transparency_query.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyTransparencyQueryService_Distinguished_FullMethodName = "/kt_query.KeyTransparencyQueryService/Distinguished"
	KeyTransparencyQueryService_Search_FullMethodName        = "/kt_query.KeyTransparencyQueryService/Search"
	KeyTransparencyQueryService_Monitor_FullMethodName       = "/kt_query.KeyTransparencyQueryService/Monitor"
)

// KeyTransparencyQueryServiceClient is the client API for KeyTransparencyQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// An external-facing, read-only key transparency service used by Signal's chat server
// to look up and monitor identifiers.
// There are three types of identifier mappings stored by the key transparency log:
// - An ACI which maps to an ACI identity key
// - An E164-formatted phone number which maps to an ACI
// - A username hash which also maps to an ACI
// Separately, the log also stores and periodically updates a fixed value known as the `distinguished` key.
// Clients use the verified tree head from looking up this key for future calls to the Search and Monitor endpoints.
type KeyTransparencyQueryServiceClient interface {
	// An endpoint used by clients to look up the most recent `distinguished` key.
	Distinguished(ctx context.Context, in *DistinguishedRequest, opts ...grpc.CallOption) (*DistinguishedResponse, error)
	// An endpoint used by clients to search for the given identifiers in the transparency log.
	// The server returns proof that the requested identifiers exist in the log.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// An endpoint that allows users to monitor a group of identifiers by returning proof that the log continues to be
	// constructed correctly in later entries for those identifiers.
	Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error)
}

type keyTransparencyQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyTransparencyQueryServiceClient(cc grpc.ClientConnInterface) KeyTransparencyQueryServiceClient {
	return &keyTransparencyQueryServiceClient{cc}
}

func (c *keyTransparencyQueryServiceClient) Distinguished(ctx context.Context, in *DistinguishedRequest, opts ...grpc.CallOption) (*DistinguishedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistinguishedResponse)
	err := c.cc.Invoke(ctx, KeyTransparencyQueryService_Distinguished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyQueryServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, KeyTransparencyQueryService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyQueryServiceClient) Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitorResponse)
	err := c.cc.Invoke(ctx, KeyTransparencyQueryService_Monitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyQueryServiceServer is the server API for KeyTransparencyQueryService service.
// All implementations must embed UnimplementedKeyTransparencyQueryServiceServer
// for forward compatibility.
//
// An external-facing, read-only key transparency service used by Signal's chat server
// to look up and monitor identifiers.
// There are three types of identifier mappings stored by the key transparency log:
// - An ACI which maps to an ACI identity key
// - An E164-formatted phone number which maps to an ACI
// - A username hash which also maps to an ACI
// Separately, the log also stores and periodically updates a fixed value known as the `distinguished` key.
// Clients use the verified tree head from looking up this key for future calls to the Search and Monitor endpoints.
type KeyTransparencyQueryServiceServer interface {
	// An endpoint used by clients to look up the most recent `distinguished` key.
	Distinguished(context.Context, *DistinguishedRequest) (*DistinguishedResponse, error)
	// An endpoint used by clients to search for the given identifiers in the transparency log.
	// The server returns proof that the requested identifiers exist in the log.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// An endpoint that allows users to monitor a group of identifiers by returning proof that the log continues to be
	// constructed correctly in later entries for those identifiers.
	Monitor(context.Context, *MonitorRequest) (*MonitorResponse, error)
	mustEmbedUnimplementedKeyTransparencyQueryServiceServer()
}

// UnimplementedKeyTransparencyQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyTransparencyQueryServiceServer struct{}

func (UnimplementedKeyTransparencyQueryServiceServer) Distinguished(context.Context, *DistinguishedRequest) (*DistinguishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distinguished not implemented")
}
func (UnimplementedKeyTransparencyQueryServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedKeyTransparencyQueryServiceServer) Monitor(context.Context, *MonitorRequest) (*MonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedKeyTransparencyQueryServiceServer) mustEmbedUnimplementedKeyTransparencyQueryServiceServer() {
}
func (UnimplementedKeyTransparencyQueryServiceServer) testEmbeddedByValue() {}

// UnsafeKeyTransparencyQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyTransparencyQueryServiceServer will
// result in compilation errors.
type UnsafeKeyTransparencyQueryServiceServer interface {
	mustEmbedUnimplementedKeyTransparencyQueryServiceServer()
}

func RegisterKeyTransparencyQueryServiceServer(s grpc.ServiceRegistrar, srv KeyTransparencyQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyTransparencyQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyTransparencyQueryService_ServiceDesc, srv)
}

func _KeyTransparencyQueryService_Distinguished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistinguishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyQueryServiceServer).Distinguished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyTransparencyQueryService_Distinguished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyQueryServiceServer).Distinguished(ctx, req.(*DistinguishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyQueryService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyQueryServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyTransparencyQueryService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyQueryServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyQueryService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyQueryServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyTransparencyQueryService_Monitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyQueryServiceServer).Monitor(ctx, req.(*MonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyTransparencyQueryService_ServiceDesc is the grpc.ServiceDesc for KeyTransparencyQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyTransparencyQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kt_query.KeyTransparencyQueryService",
	HandlerType: (*KeyTransparencyQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Distinguished",
			Handler:    _KeyTransparencyQueryService_Distinguished_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _KeyTransparencyQueryService_Search_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _KeyTransparencyQueryService_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_transparency_query.proto",
}
