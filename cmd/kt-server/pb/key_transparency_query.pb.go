//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: key_transparency_query.proto

package pb

import (
	pb "github.com/signalapp/keytransparency/tree/transparency/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DistinguishedRequest looks up the most recent `distinguished` key in the transparency log.
type DistinguishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tree size of the last verified distinguished request. With the exception of a client's
	// very first request, this field should always be populated.
	Last *uint64 `protobuf:"varint,1,opt,name=last,proto3,oneof" json:"last,omitempty"`
}

func (x *DistinguishedRequest) Reset() {
	*x = DistinguishedRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinguishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinguishedRequest) ProtoMessage() {}

func (x *DistinguishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinguishedRequest.ProtoReflect.Descriptor instead.
func (*DistinguishedRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{0}
}

func (x *DistinguishedRequest) GetLast() uint64 {
	if x != nil && x.Last != nil {
		return *x.Last
	}
	return 0
}

// DistinguishedResponse contains the tree head and search proof for the most recent `distinguished` key in the log.
type DistinguishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead      *pb.FullTreeHead             `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	Distinguished *CondensedTreeSearchResponse `protobuf:"bytes,2,opt,name=distinguished,proto3" json:"distinguished,omitempty"`
}

func (x *DistinguishedResponse) Reset() {
	*x = DistinguishedResponse{}
	mi := &file_key_transparency_query_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinguishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinguishedResponse) ProtoMessage() {}

func (x *DistinguishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinguishedResponse.ProtoReflect.Descriptor instead.
func (*DistinguishedResponse) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{1}
}

func (x *DistinguishedResponse) GetTreeHead() *pb.FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *DistinguishedResponse) GetDistinguished() *CondensedTreeSearchResponse {
	if x != nil {
		return x.Distinguished
	}
	return nil
}

// SearchRequest comes from a user that wishes to look up one or more identifiers in the transparency log.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aci               []byte             `protobuf:"bytes,1,opt,name=aci,proto3" json:"aci,omitempty"`
	AciIdentityKey    []byte             `protobuf:"bytes,2,opt,name=aci_identity_key,json=aciIdentityKey,proto3" json:"aci_identity_key,omitempty"`
	UsernameHash      []byte             `protobuf:"bytes,3,opt,name=username_hash,json=usernameHash,proto3,oneof" json:"username_hash,omitempty"`
	E164SearchRequest *E164SearchRequest `protobuf:"bytes,4,opt,name=e164_search_request,json=e164SearchRequest,proto3,oneof" json:"e164_search_request,omitempty"`
	Consistency       *pb.Consistency    `protobuf:"bytes,5,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetAci() []byte {
	if x != nil {
		return x.Aci
	}
	return nil
}

func (x *SearchRequest) GetAciIdentityKey() []byte {
	if x != nil {
		return x.AciIdentityKey
	}
	return nil
}

func (x *SearchRequest) GetUsernameHash() []byte {
	if x != nil {
		return x.UsernameHash
	}
	return nil
}

func (x *SearchRequest) GetE164SearchRequest() *E164SearchRequest {
	if x != nil {
		return x.E164SearchRequest
	}
	return nil
}

func (x *SearchRequest) GetConsistency() *pb.Consistency {
	if x != nil {
		return x.Consistency
	}
	return nil
}

// E164SearchRequest contains the data that the user must provide when looking up an E164
type E164SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E164                  *string `protobuf:"bytes,1,opt,name=e164,proto3,oneof" json:"e164,omitempty"`
	UnidentifiedAccessKey []byte  `protobuf:"bytes,2,opt,name=unidentified_access_key,json=unidentifiedAccessKey,proto3" json:"unidentified_access_key,omitempty"`
}

func (x *E164SearchRequest) Reset() {
	*x = E164SearchRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E164SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E164SearchRequest) ProtoMessage() {}

func (x *E164SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E164SearchRequest.ProtoReflect.Descriptor instead.
func (*E164SearchRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{3}
}

func (x *E164SearchRequest) GetE164() string {
	if x != nil && x.E164 != nil {
		return *x.E164
	}
	return ""
}

func (x *E164SearchRequest) GetUnidentifiedAccessKey() []byte {
	if x != nil {
		return x.UnidentifiedAccessKey
	}
	return nil
}

// CondensedTreeSearchResponse contains the search proof and other data for a given identifier.
// It is used in the SearchResponse protobuf which is returned to external clients.
type CondensedTreeSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfProof []byte          `protobuf:"bytes,1,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	Search   *pb.SearchProof `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Opening  []byte          `protobuf:"bytes,3,opt,name=opening,proto3" json:"opening,omitempty"`
	Value    *pb.UpdateValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CondensedTreeSearchResponse) Reset() {
	*x = CondensedTreeSearchResponse{}
	mi := &file_key_transparency_query_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CondensedTreeSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CondensedTreeSearchResponse) ProtoMessage() {}

func (x *CondensedTreeSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CondensedTreeSearchResponse.ProtoReflect.Descriptor instead.
func (*CondensedTreeSearchResponse) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{4}
}

func (x *CondensedTreeSearchResponse) GetVrfProof() []byte {
	if x != nil {
		return x.VrfProof
	}
	return nil
}

func (x *CondensedTreeSearchResponse) GetSearch() *pb.SearchProof {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *CondensedTreeSearchResponse) GetOpening() []byte {
	if x != nil {
		return x.Opening
	}
	return nil
}

func (x *CondensedTreeSearchResponse) GetValue() *pb.UpdateValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// SearchResponse contains search proofs for each of the requested identifiers.
type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead     *pb.FullTreeHead             `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	Aci          *CondensedTreeSearchResponse `protobuf:"bytes,2,opt,name=aci,proto3" json:"aci,omitempty"`
	E164         *CondensedTreeSearchResponse `protobuf:"bytes,3,opt,name=e164,proto3,oneof" json:"e164,omitempty"`
	UsernameHash *CondensedTreeSearchResponse `protobuf:"bytes,4,opt,name=username_hash,json=usernameHash,proto3,oneof" json:"username_hash,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_key_transparency_query_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{5}
}

func (x *SearchResponse) GetTreeHead() *pb.FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *SearchResponse) GetAci() *CondensedTreeSearchResponse {
	if x != nil {
		return x.Aci
	}
	return nil
}

func (x *SearchResponse) GetE164() *CondensedTreeSearchResponse {
	if x != nil {
		return x.E164
	}
	return nil
}

func (x *SearchResponse) GetUsernameHash() *CondensedTreeSearchResponse {
	if x != nil {
		return x.UsernameHash
	}
	return nil
}

type MonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aci          *AciMonitorRequest          `protobuf:"bytes,1,opt,name=aci,proto3" json:"aci,omitempty"`
	UsernameHash *UsernameHashMonitorRequest `protobuf:"bytes,2,opt,name=username_hash,json=usernameHash,proto3,oneof" json:"username_hash,omitempty"`
	E164         *E164MonitorRequest         `protobuf:"bytes,3,opt,name=e164,proto3,oneof" json:"e164,omitempty"`
	Consistency  *pb.Consistency             `protobuf:"bytes,4,opt,name=consistency,proto3" json:"consistency,omitempty"`
}

func (x *MonitorRequest) Reset() {
	*x = MonitorRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorRequest) ProtoMessage() {}

func (x *MonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorRequest.ProtoReflect.Descriptor instead.
func (*MonitorRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{6}
}

func (x *MonitorRequest) GetAci() *AciMonitorRequest {
	if x != nil {
		return x.Aci
	}
	return nil
}

func (x *MonitorRequest) GetUsernameHash() *UsernameHashMonitorRequest {
	if x != nil {
		return x.UsernameHash
	}
	return nil
}

func (x *MonitorRequest) GetE164() *E164MonitorRequest {
	if x != nil {
		return x.E164
	}
	return nil
}

func (x *MonitorRequest) GetConsistency() *pb.Consistency {
	if x != nil {
		return x.Consistency
	}
	return nil
}

type AciMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aci             []byte `protobuf:"bytes,1,opt,name=aci,proto3" json:"aci,omitempty"`
	EntryPosition   uint64 `protobuf:"varint,2,opt,name=entry_position,json=entryPosition,proto3" json:"entry_position,omitempty"`
	CommitmentIndex []byte `protobuf:"bytes,3,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
}

func (x *AciMonitorRequest) Reset() {
	*x = AciMonitorRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AciMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AciMonitorRequest) ProtoMessage() {}

func (x *AciMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AciMonitorRequest.ProtoReflect.Descriptor instead.
func (*AciMonitorRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{7}
}

func (x *AciMonitorRequest) GetAci() []byte {
	if x != nil {
		return x.Aci
	}
	return nil
}

func (x *AciMonitorRequest) GetEntryPosition() uint64 {
	if x != nil {
		return x.EntryPosition
	}
	return 0
}

func (x *AciMonitorRequest) GetCommitmentIndex() []byte {
	if x != nil {
		return x.CommitmentIndex
	}
	return nil
}

type UsernameHashMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsernameHash    []byte `protobuf:"bytes,1,opt,name=username_hash,json=usernameHash,proto3" json:"username_hash,omitempty"`
	EntryPosition   uint64 `protobuf:"varint,2,opt,name=entry_position,json=entryPosition,proto3" json:"entry_position,omitempty"`
	CommitmentIndex []byte `protobuf:"bytes,3,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
}

func (x *UsernameHashMonitorRequest) Reset() {
	*x = UsernameHashMonitorRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameHashMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameHashMonitorRequest) ProtoMessage() {}

func (x *UsernameHashMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameHashMonitorRequest.ProtoReflect.Descriptor instead.
func (*UsernameHashMonitorRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{8}
}

func (x *UsernameHashMonitorRequest) GetUsernameHash() []byte {
	if x != nil {
		return x.UsernameHash
	}
	return nil
}

func (x *UsernameHashMonitorRequest) GetEntryPosition() uint64 {
	if x != nil {
		return x.EntryPosition
	}
	return 0
}

func (x *UsernameHashMonitorRequest) GetCommitmentIndex() []byte {
	if x != nil {
		return x.CommitmentIndex
	}
	return nil
}

type E164MonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E164            *string `protobuf:"bytes,1,opt,name=e164,proto3,oneof" json:"e164,omitempty"`
	EntryPosition   uint64  `protobuf:"varint,2,opt,name=entry_position,json=entryPosition,proto3" json:"entry_position,omitempty"`
	CommitmentIndex []byte  `protobuf:"bytes,3,opt,name=commitment_index,json=commitmentIndex,proto3" json:"commitment_index,omitempty"`
}

func (x *E164MonitorRequest) Reset() {
	*x = E164MonitorRequest{}
	mi := &file_key_transparency_query_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *E164MonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E164MonitorRequest) ProtoMessage() {}

func (x *E164MonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E164MonitorRequest.ProtoReflect.Descriptor instead.
func (*E164MonitorRequest) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{9}
}

func (x *E164MonitorRequest) GetE164() string {
	if x != nil && x.E164 != nil {
		return *x.E164
	}
	return ""
}

func (x *E164MonitorRequest) GetEntryPosition() uint64 {
	if x != nil {
		return x.EntryPosition
	}
	return 0
}

func (x *E164MonitorRequest) GetCommitmentIndex() []byte {
	if x != nil {
		return x.CommitmentIndex
	}
	return nil
}

type MonitorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TreeHead     *pb.FullTreeHead `protobuf:"bytes,1,opt,name=tree_head,json=treeHead,proto3" json:"tree_head,omitempty"`
	Aci          *pb.MonitorProof `protobuf:"bytes,2,opt,name=aci,proto3" json:"aci,omitempty"`
	UsernameHash *pb.MonitorProof `protobuf:"bytes,3,opt,name=username_hash,json=usernameHash,proto3,oneof" json:"username_hash,omitempty"`
	E164         *pb.MonitorProof `protobuf:"bytes,4,opt,name=e164,proto3,oneof" json:"e164,omitempty"`
	Inclusion    [][]byte         `protobuf:"bytes,5,rep,name=inclusion,proto3" json:"inclusion,omitempty"`
}

func (x *MonitorResponse) Reset() {
	*x = MonitorResponse{}
	mi := &file_key_transparency_query_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorResponse) ProtoMessage() {}

func (x *MonitorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_key_transparency_query_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorResponse.ProtoReflect.Descriptor instead.
func (*MonitorResponse) Descriptor() ([]byte, []int) {
	return file_key_transparency_query_proto_rawDescGZIP(), []int{10}
}

func (x *MonitorResponse) GetTreeHead() *pb.FullTreeHead {
	if x != nil {
		return x.TreeHead
	}
	return nil
}

func (x *MonitorResponse) GetAci() *pb.MonitorProof {
	if x != nil {
		return x.Aci
	}
	return nil
}

func (x *MonitorResponse) GetUsernameHash() *pb.MonitorProof {
	if x != nil {
		return x.UsernameHash
	}
	return nil
}

func (x *MonitorResponse) GetE164() *pb.MonitorProof {
	if x != nil {
		return x.E164
	}
	return nil
}

func (x *MonitorResponse) GetInclusion() [][]byte {
	if x != nil {
		return x.Inclusion
	}
	return nil
}

var File_key_transparency_query_proto protoreflect.FileDescriptor

var file_key_transparency_query_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x14,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x63, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63,
	0x69, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x63, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x13, 0x65, 0x31, 0x36, 0x34, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x31, 0x36, 0x34, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x01, 0x52, 0x11, 0x65, 0x31, 0x36, 0x34,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x11, 0x45, 0x31, 0x36, 0x34, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x65, 0x31, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x31,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x75, 0x6e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x65,
	0x6e, 0x73, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x72, 0x66, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x72, 0x66, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xae, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x37, 0x0a,
	0x03, 0x61, 0x63, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x03, 0x61, 0x63, 0x69, 0x12, 0x3e, 0x0a, 0x04, 0x65, 0x31, 0x36, 0x34, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x31, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x73,
	0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x31, 0x36, 0x34,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x63, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x63,
	0x69, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x03, 0x61, 0x63, 0x69, 0x12, 0x4e, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x65, 0x31, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x31,
	0x36, 0x34, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x01, 0x52, 0x04, 0x65, 0x31, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65,
	0x31, 0x36, 0x34, 0x22, 0x77, 0x0a, 0x11, 0x41, 0x63, 0x69, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x63, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x93, 0x01, 0x0a,
	0x1a, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x45, 0x31, 0x36, 0x34, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x31, 0x36,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x31, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x22, 0xac, 0x02,
	0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x03, 0x61, 0x63, 0x69, 0x12, 0x44, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x04, 0x65, 0x31, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x01, 0x52, 0x04, 0x65, 0x31, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x31, 0x36, 0x34, 0x32, 0xf2, 0x01, 0x0a,
	0x1b, 0x4b, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x2e,
	0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x17, 0x2e, 0x6b, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x2e, 0x6b, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6b, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x6b, 0x74,
	0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_key_transparency_query_proto_rawDescOnce sync.Once
	file_key_transparency_query_proto_rawDescData = file_key_transparency_query_proto_rawDesc
)

func file_key_transparency_query_proto_rawDescGZIP() []byte {
	file_key_transparency_query_proto_rawDescOnce.Do(func() {
		file_key_transparency_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_key_transparency_query_proto_rawDescData)
	})
	return file_key_transparency_query_proto_rawDescData
}

var file_key_transparency_query_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_key_transparency_query_proto_goTypes = []any{
	(*DistinguishedRequest)(nil),        // 0: kt_query.DistinguishedRequest
	(*DistinguishedResponse)(nil),       // 1: kt_query.DistinguishedResponse
	(*SearchRequest)(nil),               // 2: kt_query.SearchRequest
	(*E164SearchRequest)(nil),           // 3: kt_query.E164SearchRequest
	(*CondensedTreeSearchResponse)(nil), // 4: kt_query.CondensedTreeSearchResponse
	(*SearchResponse)(nil),              // 5: kt_query.SearchResponse
	(*MonitorRequest)(nil),              // 6: kt_query.MonitorRequest
	(*AciMonitorRequest)(nil),           // 7: kt_query.AciMonitorRequest
	(*UsernameHashMonitorRequest)(nil),  // 8: kt_query.UsernameHashMonitorRequest
	(*E164MonitorRequest)(nil),          // 9: kt_query.E164MonitorRequest
	(*MonitorResponse)(nil),             // 10: kt_query.MonitorResponse
	(*pb.FullTreeHead)(nil),             // 11: transparency.FullTreeHead
	(*pb.Consistency)(nil),              // 12: transparency.Consistency
	(*pb.SearchProof)(nil),              // 13: transparency.SearchProof
	(*pb.UpdateValue)(nil),              // 14: transparency.UpdateValue
	(*pb.MonitorProof)(nil),             // 15: transparency.MonitorProof
}
var file_key_transparency_query_proto_depIdxs = []int32{
	11, // 0: kt_query.DistinguishedResponse.tree_head:type_name -> transparency.FullTreeHead
	4,  // 1: kt_query.DistinguishedResponse.distinguished:type_name -> kt_query.CondensedTreeSearchResponse
	3,  // 2: kt_query.SearchRequest.e164_search_request:type_name -> kt_query.E164SearchRequest
	12, // 3: kt_query.SearchRequest.consistency:type_name -> transparency.Consistency
	13, // 4: kt_query.CondensedTreeSearchResponse.search:type_name -> transparency.SearchProof
	14, // 5: kt_query.CondensedTreeSearchResponse.value:type_name -> transparency.UpdateValue
	11, // 6: kt_query.SearchResponse.tree_head:type_name -> transparency.FullTreeHead
	4,  // 7: kt_query.SearchResponse.aci:type_name -> kt_query.CondensedTreeSearchResponse
	4,  // 8: kt_query.SearchResponse.e164:type_name -> kt_query.CondensedTreeSearchResponse
	4,  // 9: kt_query.SearchResponse.username_hash:type_name -> kt_query.CondensedTreeSearchResponse
	7,  // 10: kt_query.MonitorRequest.aci:type_name -> kt_query.AciMonitorRequest
	8,  // 11: kt_query.MonitorRequest.username_hash:type_name -> kt_query.UsernameHashMonitorRequest
	9,  // 12: kt_query.MonitorRequest.e164:type_name -> kt_query.E164MonitorRequest
	12, // 13: kt_query.MonitorRequest.consistency:type_name -> transparency.Consistency
	11, // 14: kt_query.MonitorResponse.tree_head:type_name -> transparency.FullTreeHead
	15, // 15: kt_query.MonitorResponse.aci:type_name -> transparency.MonitorProof
	15, // 16: kt_query.MonitorResponse.username_hash:type_name -> transparency.MonitorProof
	15, // 17: kt_query.MonitorResponse.e164:type_name -> transparency.MonitorProof
	0,  // 18: kt_query.KeyTransparencyQueryService.Distinguished:input_type -> kt_query.DistinguishedRequest
	2,  // 19: kt_query.KeyTransparencyQueryService.Search:input_type -> kt_query.SearchRequest
	6,  // 20: kt_query.KeyTransparencyQueryService.Monitor:input_type -> kt_query.MonitorRequest
	1,  // 21: kt_query.KeyTransparencyQueryService.Distinguished:output_type -> kt_query.DistinguishedResponse
	5,  // 22: kt_query.KeyTransparencyQueryService.Search:output_type -> kt_query.SearchResponse
	10, // 23: kt_query.KeyTransparencyQueryService.Monitor:output_type -> kt_query.MonitorResponse
	21, // [21:24] is the sub-list for method output_type
	18, // [18:21] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_key_transparency_query_proto_init() }
func file_key_transparency_query_proto_init() {
	if File_key_transparency_query_proto != nil {
		return
	}
	file_key_transparency_query_proto_msgTypes[0].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[2].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[3].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[5].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[6].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[9].OneofWrappers = []any{}
	file_key_transparency_query_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_key_transparency_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_key_transparency_query_proto_goTypes,
		DependencyIndexes: file_key_transparency_query_proto_depIdxs,
		MessageInfos:      file_key_transparency_query_proto_msgTypes,
	}.Build()
	File_key_transparency_query_proto = out.File
	file_key_transparency_query_proto_rawDesc = nil
	file_key_transparency_query_proto_goTypes = nil
	file_key_transparency_query_proto_depIdxs = nil
}
