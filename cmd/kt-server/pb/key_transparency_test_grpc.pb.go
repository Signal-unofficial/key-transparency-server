//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: key_transparency_test.proto

package pb

import (
	context "context"
	pb "github.com/signalapp/keytransparency/tree/transparency/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyTransparencyTestService_Update_FullMethodName = "/kt_test.KeyTransparencyTestService/Update"
)

// KeyTransparencyTestServiceClient is the client API for KeyTransparencyTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A key transparency service intended for local testing and development purposes only.
type KeyTransparencyTestServiceClient interface {
	// An endpoint used by local clients to update a search key.
	Update(ctx context.Context, in *pb.UpdateRequest, opts ...grpc.CallOption) (*pb.UpdateResponse, error)
}

type keyTransparencyTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyTransparencyTestServiceClient(cc grpc.ClientConnInterface) KeyTransparencyTestServiceClient {
	return &keyTransparencyTestServiceClient{cc}
}

func (c *keyTransparencyTestServiceClient) Update(ctx context.Context, in *pb.UpdateRequest, opts ...grpc.CallOption) (*pb.UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.UpdateResponse)
	err := c.cc.Invoke(ctx, KeyTransparencyTestService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyTransparencyTestServiceServer is the server API for KeyTransparencyTestService service.
// All implementations must embed UnimplementedKeyTransparencyTestServiceServer
// for forward compatibility.
//
// A key transparency service intended for local testing and development purposes only.
type KeyTransparencyTestServiceServer interface {
	// An endpoint used by local clients to update a search key.
	Update(context.Context, *pb.UpdateRequest) (*pb.UpdateResponse, error)
	mustEmbedUnimplementedKeyTransparencyTestServiceServer()
}

// UnimplementedKeyTransparencyTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyTransparencyTestServiceServer struct{}

func (UnimplementedKeyTransparencyTestServiceServer) Update(context.Context, *pb.UpdateRequest) (*pb.UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKeyTransparencyTestServiceServer) mustEmbedUnimplementedKeyTransparencyTestServiceServer() {
}
func (UnimplementedKeyTransparencyTestServiceServer) testEmbeddedByValue() {}

// UnsafeKeyTransparencyTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyTransparencyTestServiceServer will
// result in compilation errors.
type UnsafeKeyTransparencyTestServiceServer interface {
	mustEmbedUnimplementedKeyTransparencyTestServiceServer()
}

func RegisterKeyTransparencyTestServiceServer(s grpc.ServiceRegistrar, srv KeyTransparencyTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeyTransparencyTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyTransparencyTestService_ServiceDesc, srv)
}

func _KeyTransparencyTestService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyTestServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyTransparencyTestService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyTestServiceServer).Update(ctx, req.(*pb.UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyTransparencyTestService_ServiceDesc is the grpc.ServiceDesc for KeyTransparencyTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyTransparencyTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kt_test.KeyTransparencyTestService",
	HandlerType: (*KeyTransparencyTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _KeyTransparencyTestService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_transparency_test.proto",
}
