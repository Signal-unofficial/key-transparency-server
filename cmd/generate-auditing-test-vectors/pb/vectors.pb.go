//
// Copyright 2025 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: vectors.proto

package pb

import (
	pb "github.com/signalapp/keytransparency/tree/transparency/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestVectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldFail    []*TestVectors_ShouldFailTestVector  `protobuf:"bytes,1,rep,name=should_fail,json=shouldFail,proto3" json:"should_fail,omitempty"`
	ShouldSucceed *TestVectors_ShouldSucceedTestVector `protobuf:"bytes,2,opt,name=should_succeed,json=shouldSucceed,proto3" json:"should_succeed,omitempty"`
	Signature     *TestVectors_SignatureTestVector     `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *TestVectors) Reset() {
	*x = TestVectors{}
	mi := &file_vectors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVectors) ProtoMessage() {}

func (x *TestVectors) ProtoReflect() protoreflect.Message {
	mi := &file_vectors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVectors.ProtoReflect.Descriptor instead.
func (*TestVectors) Descriptor() ([]byte, []int) {
	return file_vectors_proto_rawDescGZIP(), []int{0}
}

func (x *TestVectors) GetShouldFail() []*TestVectors_ShouldFailTestVector {
	if x != nil {
		return x.ShouldFail
	}
	return nil
}

func (x *TestVectors) GetShouldSucceed() *TestVectors_ShouldSucceedTestVector {
	if x != nil {
		return x.ShouldSucceed
	}
	return nil
}

func (x *TestVectors) GetSignature() *TestVectors_SignatureTestVector {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TestVectors_ShouldFailTestVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string              `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Updates     []*pb.AuditorUpdate `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *TestVectors_ShouldFailTestVector) Reset() {
	*x = TestVectors_ShouldFailTestVector{}
	mi := &file_vectors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVectors_ShouldFailTestVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVectors_ShouldFailTestVector) ProtoMessage() {}

func (x *TestVectors_ShouldFailTestVector) ProtoReflect() protoreflect.Message {
	mi := &file_vectors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVectors_ShouldFailTestVector.ProtoReflect.Descriptor instead.
func (*TestVectors_ShouldFailTestVector) Descriptor() ([]byte, []int) {
	return file_vectors_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestVectors_ShouldFailTestVector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestVectors_ShouldFailTestVector) GetUpdates() []*pb.AuditorUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TestVectors_ShouldSucceedTestVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*TestVectors_ShouldSucceedTestVector_UpdateAndHash `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *TestVectors_ShouldSucceedTestVector) Reset() {
	*x = TestVectors_ShouldSucceedTestVector{}
	mi := &file_vectors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVectors_ShouldSucceedTestVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVectors_ShouldSucceedTestVector) ProtoMessage() {}

func (x *TestVectors_ShouldSucceedTestVector) ProtoReflect() protoreflect.Message {
	mi := &file_vectors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVectors_ShouldSucceedTestVector.ProtoReflect.Descriptor instead.
func (*TestVectors_ShouldSucceedTestVector) Descriptor() ([]byte, []int) {
	return file_vectors_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TestVectors_ShouldSucceedTestVector) GetUpdates() []*TestVectors_ShouldSucceedTestVector_UpdateAndHash {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TestVectors_SignatureTestVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditorPrivKey []byte `protobuf:"bytes,8,opt,name=auditor_priv_key,json=auditorPrivKey,proto3" json:"auditor_priv_key,omitempty"`
	DeploymentMode uint32 `protobuf:"varint,1,opt,name=deployment_mode,json=deploymentMode,proto3" json:"deployment_mode,omitempty"`
	SigPubKey      []byte `protobuf:"bytes,2,opt,name=sig_pub_key,json=sigPubKey,proto3" json:"sig_pub_key,omitempty"`
	AuditorPubKey  []byte `protobuf:"bytes,9,opt,name=auditor_pub_key,json=auditorPubKey,proto3" json:"auditor_pub_key,omitempty"`
	VrfPubKey      []byte `protobuf:"bytes,3,opt,name=vrf_pub_key,json=vrfPubKey,proto3" json:"vrf_pub_key,omitempty"`
	TreeSize       uint64 `protobuf:"varint,4,opt,name=tree_size,json=treeSize,proto3" json:"tree_size,omitempty"`
	Timestamp      int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Root           []byte `protobuf:"bytes,6,opt,name=root,proto3" json:"root,omitempty"`
	Signature      []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureInput []byte `protobuf:"bytes,10,opt,name=signature_input,json=signatureInput,proto3" json:"signature_input,omitempty"`
}

func (x *TestVectors_SignatureTestVector) Reset() {
	*x = TestVectors_SignatureTestVector{}
	mi := &file_vectors_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVectors_SignatureTestVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVectors_SignatureTestVector) ProtoMessage() {}

func (x *TestVectors_SignatureTestVector) ProtoReflect() protoreflect.Message {
	mi := &file_vectors_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVectors_SignatureTestVector.ProtoReflect.Descriptor instead.
func (*TestVectors_SignatureTestVector) Descriptor() ([]byte, []int) {
	return file_vectors_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TestVectors_SignatureTestVector) GetAuditorPrivKey() []byte {
	if x != nil {
		return x.AuditorPrivKey
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetDeploymentMode() uint32 {
	if x != nil {
		return x.DeploymentMode
	}
	return 0
}

func (x *TestVectors_SignatureTestVector) GetSigPubKey() []byte {
	if x != nil {
		return x.SigPubKey
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetAuditorPubKey() []byte {
	if x != nil {
		return x.AuditorPubKey
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetVrfPubKey() []byte {
	if x != nil {
		return x.VrfPubKey
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

func (x *TestVectors_SignatureTestVector) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TestVectors_SignatureTestVector) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TestVectors_SignatureTestVector) GetSignatureInput() []byte {
	if x != nil {
		return x.SignatureInput
	}
	return nil
}

type TestVectors_ShouldSucceedTestVector_UpdateAndHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update  *pb.AuditorUpdate `protobuf:"bytes,1,opt,name=update,proto3" json:"update,omitempty"`
	LogRoot []byte            `protobuf:"bytes,2,opt,name=log_root,json=logRoot,proto3" json:"log_root,omitempty"`
}

func (x *TestVectors_ShouldSucceedTestVector_UpdateAndHash) Reset() {
	*x = TestVectors_ShouldSucceedTestVector_UpdateAndHash{}
	mi := &file_vectors_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVectors_ShouldSucceedTestVector_UpdateAndHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVectors_ShouldSucceedTestVector_UpdateAndHash) ProtoMessage() {}

func (x *TestVectors_ShouldSucceedTestVector_UpdateAndHash) ProtoReflect() protoreflect.Message {
	mi := &file_vectors_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVectors_ShouldSucceedTestVector_UpdateAndHash.ProtoReflect.Descriptor instead.
func (*TestVectors_ShouldSucceedTestVector_UpdateAndHash) Descriptor() ([]byte, []int) {
	return file_vectors_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *TestVectors_ShouldSucceedTestVector_UpdateAndHash) GetUpdate() *pb.AuditorUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *TestVectors_ShouldSucceedTestVector_UpdateAndHash) GetLogRoot() []byte {
	if x != nil {
		return x.LogRoot
	}
	return nil
}

var File_vectors_proto protoreflect.FileDescriptor

var file_vectors_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x83, 0x07, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x1a, 0x6f, 0x0a, 0x14, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x4c, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x5f, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x33, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x52, 0x6f, 0x6f, 0x74,
	0x1a, 0xe6, 0x02, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x76, 0x4b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x76, 0x72, 0x66, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x61, 0x70,
	0x70, 0x2f, 0x6b, 0x65, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vectors_proto_rawDescOnce sync.Once
	file_vectors_proto_rawDescData = file_vectors_proto_rawDesc
)

func file_vectors_proto_rawDescGZIP() []byte {
	file_vectors_proto_rawDescOnce.Do(func() {
		file_vectors_proto_rawDescData = protoimpl.X.CompressGZIP(file_vectors_proto_rawDescData)
	})
	return file_vectors_proto_rawDescData
}

var file_vectors_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_vectors_proto_goTypes = []any{
	(*TestVectors)(nil),                                       // 0: TestVectors
	(*TestVectors_ShouldFailTestVector)(nil),                  // 1: TestVectors.ShouldFailTestVector
	(*TestVectors_ShouldSucceedTestVector)(nil),               // 2: TestVectors.ShouldSucceedTestVector
	(*TestVectors_SignatureTestVector)(nil),                   // 3: TestVectors.SignatureTestVector
	(*TestVectors_ShouldSucceedTestVector_UpdateAndHash)(nil), // 4: TestVectors.ShouldSucceedTestVector.UpdateAndHash
	(*pb.AuditorUpdate)(nil),                                  // 5: transparency.AuditorUpdate
}
var file_vectors_proto_depIdxs = []int32{
	1, // 0: TestVectors.should_fail:type_name -> TestVectors.ShouldFailTestVector
	2, // 1: TestVectors.should_succeed:type_name -> TestVectors.ShouldSucceedTestVector
	3, // 2: TestVectors.signature:type_name -> TestVectors.SignatureTestVector
	5, // 3: TestVectors.ShouldFailTestVector.updates:type_name -> transparency.AuditorUpdate
	4, // 4: TestVectors.ShouldSucceedTestVector.updates:type_name -> TestVectors.ShouldSucceedTestVector.UpdateAndHash
	5, // 5: TestVectors.ShouldSucceedTestVector.UpdateAndHash.update:type_name -> transparency.AuditorUpdate
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_vectors_proto_init() }
func file_vectors_proto_init() {
	if File_vectors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vectors_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vectors_proto_goTypes,
		DependencyIndexes: file_vectors_proto_depIdxs,
		MessageInfos:      file_vectors_proto_msgTypes,
	}.Build()
	File_vectors_proto = out.File
	file_vectors_proto_rawDesc = nil
	file_vectors_proto_goTypes = nil
	file_vectors_proto_depIdxs = nil
}
